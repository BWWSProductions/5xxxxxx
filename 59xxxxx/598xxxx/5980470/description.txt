Programming in C# with Microsoft Visual Studio 2010. Vol 1-2. (MS Course 10266A)
Publisher: Microsoft Press | 2010 | 648 + 896 pages | PDF | 54 MB

About this Course
The course focuses on C# program structure, language syntax, and implementation detailswith .NET Framework 4.0. This course describes the new enhancements in the C# 4.0 language by using Visual Studio 2010.

In this course, lower-intermediate level programmers gain the knowledge and skills they need to develop C# applications for the Microsoft .NET Framework 4.0. The course highlights the structure of C# 4.0 programs, language syntax, and implementation details. This course is not mapped to any exam.

Audience Profile
This course is intended for experienced developers who already have programming experience in C, C++, Visual Basic, or Java and understand the concepts of object-oriented programming.
This course is not designed for new programmers; it is targeted at professional developers with at least 12 months experience of programming in an object-oriented environment.

At Course Completion
After completing this course, students will be able to:

* Explain the purpose of the .NET Framework, and understand how to use C# and Visual Studio 2010 to build .NET Framework applications.
* Understand the syntax of basic C# programming constructs.
* Create and call methods in a C# application.
* Catch, handle and throw exceptions.
* Perform basic file IO operations in a C# application.
* Create and use new types (enumerations, classes, and structures), and understand the differences between reference types and value types.
* Control the visibility and lifetime of members in a type.
* Use inheritance to create new reference types.
* Manage the lifetime of objects and control the use of resources.
* Define properties and indexers to encapsulate data, and define operators for this data.
* Decouple an operation from the method that implements an operation, and use these decoupled operations to handle asynchronous events.
* Use collections to aggregate data, and use Generics to implement type-safe collection classes, structures, interfaces, and methods.
* Implement custom collection classes that support enumeration.
* Query in-memory data by using LINQ.
* Integrate code written by using a dynamic language such as Ruby and Python, or technologies such as COM, into a C# application

Course page: http://www.microsoft.com/learning/en/us/Course.aspx?ID=10266A
